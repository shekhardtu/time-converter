// Minimal date-fns-tz implementation for Chrome extension
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global.dateFnsTz = {}));
}(this, (function (exports) {
  'use strict';

  // Timezone offset mapping (hours from UTC)
  const timezoneOffsets = {
    'UTC': 0,
    'GMT': 0,
    'America/New_York': -5,    // EST (UTC-5)
    'America/Chicago': -6,     // CST (UTC-6)
    'America/Denver': -7,      // MST (UTC-7)
    'America/Los_Angeles': -8, // PST (UTC-8)
    'Asia/Kolkata': 5.5,       // IST (UTC+5:30)
    'Asia/Tokyo': 9,           // JST (UTC+9)
    'Europe/Paris': 1,         // CET (UTC+1)
    'Australia/Sydney': 10,    // AEST (UTC+10)
    'Etc/GMT': 0
  };

  // Convert a date assumed to be in a specific timezone to UTC
  function zonedTimeToUtc(date, timeZone) {
    if (!(date instanceof Date)) {
      throw new Error('Invalid date');
    }
    
    const offset = timezoneOffsets[timeZone] || 0;
    // If date is in timezone with +5.5 offset (IST), to get UTC we subtract the offset
    return new Date(date.getTime() - (offset * 60 * 60 * 1000));
  }

  // Convert UTC time to a specific timezone
  function utcToZonedTime(date, timeZone) {
    if (!(date instanceof Date)) {
      throw new Error('Invalid date');
    }
    
    const offset = timezoneOffsets[timeZone] || 0;
    // If converting UTC to timezone with +5.5 offset (IST), we add the offset
    return new Date(date.getTime() + (offset * 60 * 60 * 1000));
  }

  // Format a date in a specific timezone
  function format(date, formatString, _options = {}) {
    if (!(date instanceof Date) || isNaN(date.getTime())) {
      return 'Invalid Date';
    }
    
    // Don't double-convert - the date should already be in the target timezone
    const zonedDate = date;
    
    const year = zonedDate.getFullYear();
    const month = String(zonedDate.getMonth() + 1).padStart(2, '0');
    const day = String(zonedDate.getDate()).padStart(2, '0');
    const hour = zonedDate.getHours();
    const minute = String(zonedDate.getMinutes()).padStart(2, '0');
    const second = String(zonedDate.getSeconds()).padStart(2, '0');
    
    // Handle 12-hour format
    const hour12 = hour === 0 ? 12 : hour > 12 ? hour - 12 : hour;
    const ampm = hour < 12 ? 'AM' : 'PM';
    
    let result = formatString
      .replace(/yyyy/g, year)
      .replace(/MM/g, month)
      .replace(/dd/g, day)
      .replace(/HH/g, String(hour).padStart(2, '0'))
      .replace(/hh/g, String(hour12).padStart(2, '0'))
      .replace(/mm/g, minute)
      .replace(/ss/g, second)
      .replace(/a/g, ampm);
    
    return result;
  }

  // Export functions
  exports.zonedTimeToUtc = zonedTimeToUtc;
  exports.utcToZonedTime = utcToZonedTime;
  exports.format = format;

})));